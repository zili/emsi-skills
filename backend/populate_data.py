#!/usr/bin/env python3
import os
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'emsi_project_platform.settings')
django.setup()

from accounts.models import City, User
from projects.models import Category, Project

def create_cities():
    """Cr√©er les villes du Maroc"""
    cities_data = [
        "Casablanca", "Rabat", "F√®s", "Marrakech", "Agadir", 
        "Tanger", "Mekn√®s", "Oujda", "Kenitra", "Tetouan",
        "Safi", "Mohammedia", "Khouribga", "Beni Mellal", "El Jadida"
    ]
    
    print("üèôÔ∏è Cr√©ation des villes...")
    for city_name in cities_data:
        city, created = City.objects.get_or_create(
            name=city_name,
            defaults={'country': 'Morocco'}
        )
        if created:
            print(f"   ‚úÖ {city_name}")
        else:
            print(f"   ‚ö†Ô∏è {city_name} (existe d√©j√†)")

def create_categories():
    """Cr√©er les cat√©gories de projets"""
    categories_data = [
        {
            'name': 'D√©veloppement Web',
            'description': 'Sites web, applications web, e-commerce',
            'icon': 'web'
        },
        {
            'name': 'D√©veloppement Mobile',
            'description': 'Applications iOS, Android, Flutter',
            'icon': 'mobile'
        },
        {
            'name': 'Design Graphique',
            'description': 'Logos, branding, design UI/UX',
            'icon': 'design'
        },
        {
            'name': 'Marketing Digital',
            'description': 'SEO, r√©seaux sociaux, publicit√© en ligne',
            'icon': 'marketing'
        },
        {
            'name': 'R√©daction & Traduction',
            'description': 'Articles, traduction, correction',
            'icon': 'writing'
        },
        {
            'name': 'Data Science',
            'description': 'Analyse de donn√©es, machine learning, BI',
            'icon': 'data'
        },
        {
            'name': 'Vid√©o & Animation',
            'description': 'Montage vid√©o, animation, motion design',
            'icon': 'video'
        },
        {
            'name': 'Consulting',
            'description': 'Conseil en strat√©gie, audit, formation',
            'icon': 'consulting'
        }
    ]
    
    print("\nüìÇ Cr√©ation des cat√©gories...")
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            name=cat_data['name'],
            defaults={
                'description': cat_data['description'],
                'icon': cat_data['icon']
            }
        )
        if created:
            print(f"   ‚úÖ {cat_data['name']}")
        else:
            print(f"   ‚ö†Ô∏è {cat_data['name']} (existe d√©j√†)")

def create_test_users():
    """Cr√©er quelques utilisateurs de test"""
    casablanca = City.objects.get(name="Casablanca")
    rabat = City.objects.get(name="Rabat")
    
    test_users = [
        {
            'username': 'youssef_dev',
            'email': 'youssef@emsi.ma',
            'first_name': 'Youssef',
            'last_name': 'Benali',
            'user_type': 'professional',
            'city': casablanca,
            'skills': 'Python, Django, React, PostgreSQL',
            'experience_years': 3,
            'bio': 'D√©veloppeur full-stack passionn√© avec 3 ans d\'exp√©rience'
        },
        {
            'username': 'sara_design',
            'email': 'sara@emsi.ma',
            'first_name': 'Sara',
            'last_name': 'Alami',
            'user_type': 'professional',
            'city': rabat,
            'skills': 'Photoshop, Illustrator, Figma, UI/UX',
            'experience_years': 2,
            'bio': 'Designer UI/UX cr√©ative sp√©cialis√©e en design mobile'
        },
        {
            'username': 'hassan_student',
            'email': 'hassan@student.emsi.ma',
            'first_name': 'Hassan',
            'last_name': 'Kettani',
            'user_type': 'student',
            'city': casablanca,
            'skills': 'Java, Spring Boot, MySQL',
            'experience_years': 1,
            'bio': '√âtudiant en informatique cherchant des projets pour acqu√©rir de l\'exp√©rience'
        }
    ]
    
    print("\nüë• Cr√©ation des utilisateurs de test...")
    for user_data in test_users:
        user, created = User.objects.get_or_create(
            email=user_data['email'],
            defaults=user_data
        )
        if created:
            user.set_password('password123')
            user.save()
            print(f"   ‚úÖ {user_data['first_name']} {user_data['last_name']} ({user_data['user_type']})")
        else:
            print(f"   ‚ö†Ô∏è {user_data['email']} (existe d√©j√†)")

def create_sample_projects():
    """Cr√©er quelques projets d'exemple"""
    try:
        # R√©cup√©rer les utilisateurs et cat√©gories
        admin = User.objects.get(email='admin@emsi.ma')
        web_category = Category.objects.get(name='D√©veloppement Web')
        design_category = Category.objects.get(name='Design Graphique')
        
        sample_projects = [
            {
                'title': 'Site E-commerce pour Boutique',
                'description': 'D√©veloppement d\'un site e-commerce complet pour une boutique de v√™tements avec panier, paiement en ligne et gestion des stocks.',
                'category': web_category,
                'client': admin,
                'budget_range': '2000-5000',
                'estimated_duration': '2-months',
                'required_skills': 'PHP, Laravel, MySQL, Payment Gateway',
                'status': 'approved',
                'is_featured': True
            },
            {
                'title': 'Design Logo et Identit√© Visuelle',
                'description': 'Cr√©ation d\'un logo professionnel et d\'une charte graphique compl√®te pour une startup tech.',
                'category': design_category,
                'client': admin,
                'budget_range': '500-1000',
                'estimated_duration': '2-weeks',
                'required_skills': 'Illustrator, Photoshop, Branding',
                'status': 'approved',
                'is_urgent': True
            }
        ]
        
        print("\nüìã Cr√©ation des projets d'exemple...")
        for project_data in sample_projects:
            project, created = Project.objects.get_or_create(
                title=project_data['title'],
                defaults=project_data
            )
            if created:
                print(f"   ‚úÖ {project_data['title']}")
            else:
                print(f"   ‚ö†Ô∏è {project_data['title']} (existe d√©j√†)")
                
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la cr√©ation des projets: {e}")

if __name__ == '__main__':
    print("üöÄ PEUPLEMENT DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    try:
        create_cities()
        create_categories()
        create_test_users()
        create_sample_projects()
        
        print("\n‚úÖ Base de donn√©es peupl√©e avec succ√®s !")
        print("\nüìä R√©sum√©:")
        print(f"   - Villes: {City.objects.count()}")
        print(f"   - Cat√©gories: {Category.objects.count()}")
        print(f"   - Utilisateurs: {User.objects.count()}")
        print(f"   - Projets: {Project.objects.count()}")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}") 